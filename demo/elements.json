{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Polymer",
      "description": "",
      "summary": "Polymer is a lightweight library built on top of the web\nstandards-based Web Components API's, and makes it easy to build your\nown custom HTML elements.",
      "sourceRange": {
        "file": "lib/utils/boot.html",
        "start": {
          "line": 17,
          "column": 2
        },
        "end": {
          "line": 19,
          "column": 3
        }
      }
    },
    {
      "name": "Polymer.CaseMap",
      "description": "Module with utilities for converting between \"dash-case\" and \"camelCase\"\nidentifiers.",
      "summary": "Module that provides utilities for converting between \"dash-case\"\n  and \"camelCase\".",
      "sourceRange": {
        "file": "lib/utils/case-map.html",
        "start": {
          "line": 26,
          "column": 2
        },
        "end": {
          "line": 58,
          "column": 4
        }
      }
    },
    {
      "name": "Polymer.ResolveUrl",
      "description": "Module with utilities for resolving relative URL's.",
      "summary": "Module with utilities for resolving relative URL's.",
      "sourceRange": {
        "file": "lib/utils/resolve-url.html",
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 6
        }
      }
    },
    {
      "name": "Polymer.StyleGather",
      "description": "Module with utilities for collection CSS text from `<templates>`, external\nstylesheets, and `dom-module`s.",
      "summary": "Module with utilities for collection CSS text from various sources.",
      "sourceRange": {
        "file": "lib/utils/style-gather.html",
        "start": {
          "line": 32,
          "column": 2
        },
        "end": {
          "line": 138,
          "column": 4
        }
      }
    },
    {
      "name": "Polymer.Path",
      "description": "Module with utilities for manipulating structured data path strings.",
      "summary": "Module with utilities for manipulating structured data path strings.",
      "sourceRange": {
        "file": "lib/utils/path.html",
        "start": {
          "line": 22,
          "column": 2
        },
        "end": {
          "line": 244,
          "column": 4
        }
      }
    },
    {
      "name": "Polymer.Async",
      "description": "Module that provides a number of strategies for enqueuing asynchronous\ntasks.  Each sub-module provides a standard `run(fn)` interface that returns a\nhandle, and a `cancel(handle)` interface for canceling async tasks before\nthey run.",
      "summary": "Module that provides a number of strategies for enqueuing asynchronous\ntasks.",
      "sourceRange": {
        "file": "lib/utils/async.html",
        "start": {
          "line": 54,
          "column": 2
        },
        "end": {
          "line": 198,
          "column": 4
        }
      }
    },
    {
      "name": "Polymer.Gestures",
      "description": "Module for adding listeners to a node for the following normalized\ncross-platform \"gesture\" events:\n- `down` - mouse or touch went down\n- `up` - mouse or touch went up\n- `tap` - mouse click or finger tap\n- `track` - mouse drag or touch move",
      "summary": "Module for adding cross-platform gesture event listeners.",
      "sourceRange": {
        "file": "lib/utils/gestures.html",
        "start": {
          "line": 210,
          "column": 2
        },
        "end": {
          "line": 537,
          "column": 4
        }
      }
    },
    {
      "name": "Polymer.RenderStatus",
      "description": "Module for scheduling flushable pre-render and post-render tasks.",
      "summary": "Module for scheduling flushable pre-render and post-render tasks.",
      "sourceRange": {
        "file": "lib/utils/render-status.html",
        "start": {
          "line": 63,
          "column": 2
        },
        "end": {
          "line": 116,
          "column": 4
        }
      }
    },
    {
      "name": "Polymer.ArraySplice",
      "description": "",
      "summary": "Module that provides utilities for diffing arrays.",
      "sourceRange": {
        "file": "lib/utils/array-splice.html",
        "start": {
          "line": 265,
          "column": 2
        },
        "end": {
          "line": 292,
          "column": 3
        }
      }
    },
    {
      "name": "Polymer.Templatize",
      "description": "Module for preparing and stamping instances of templates that utilize\nPolymer's data-binding and declarative event listener features.\n\nExample:\n\n    // Get a template from somewhere, e.g. light DOM\n    let template = this.querySelector('template');\n    // Prepare the template\n    let TemplateClass = Polymer.Tempaltize.templatize(template);\n    // Instance the template with an initial data model\n    let instance = new TemplateClass({myProp: 'initial'});\n    // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n    this.shadowRoot.appendChild(instance.root);\n    // Changing a property on the instance will propagate to bindings\n    // in the template\n    instance.myProp = 'new value';\n\nThe `options` dictionary passed to `templatize` allows for customizing\nfeatures of the generated template class, including how outer-scope host\nproperties should be forwarded into template instances, how any instance\nproperties added into the template's scope should be notified out to\nthe host, and whether the instance should be decorated as a \"parent model\"\nof any event handlers.\n\n    // Customze property forwarding and event model decoration\n    let TemplateClass = Polymer.Tempaltize.templatize(template, this, {\n      parentModel: true,\n      instanceProps: {...},\n      forwardHostProp(property, value) {...},\n      notifyInstanceProp(instance, property, value) {...},\n    });",
      "summary": "Module for preparing and stamping instances of templates\n  utilizing Polymer templating features.",
      "sourceRange": {
        "file": "lib/utils/templatize.html",
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 439,
          "column": 5
        }
      }
    }
  ],
  "elements": [
    {
      "description": "The `dom-module` element registers the dom it contains to the name given\nby the module's id attribute. It provides a unified database of dom\naccessible via its static `import` API.\n\nA key use case of `dom-module` is for providing custom element `<template>`s\nvia HTML imports that are parsed by the native HTML parser, that can be\nrelocated during a bundling pass and still looked up by `id`.\n\nExample:\n\n    <dom-module id=\"foo\">\n      <img src=\"stuff.png\">\n    </dom-module>\n\nThen in code in some other location that cannot access the dom-module above\n\n    let img = document.createElement('dom-module').import('foo', 'img');",
      "summary": "Custom element that provides a registry of relocatable DOM content\n  by `id` that is agnostic to bundling.",
      "path": "lib/elements/dom-module.html",
      "attributes": [
        {
          "name": "id",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 46
            },
            "end": {
              "line": 44,
              "column": 50
            }
          },
          "metadata": {}
        }
      ],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 42,
          "column": 2
        },
        "end": {
          "line": 115,
          "column": 3
        }
      },
      "tagname": "dom-module",
      "classname": "Polymer.DomModule",
      "superclass": "HTMLElement"
    },
    {
      "description": "Custom element to allow using Polymer's template features (data binding,\ndeclarative event listeners, etc.) in the main document without defining\na new custom element.\n\n`<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\nelement, which will immediately stamp the wrapped template into the main\ndocument and bind elements to the `dom-bind` element itself as the\nbinding scope.",
      "summary": "Custom element to allow using Polymer's template features (data\n  binding, declarative event listeners, etc.) in the main document.",
      "path": "lib/elements/dom-bind.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 35,
          "column": 4
        },
        "end": {
          "line": 91,
          "column": 5
        }
      },
      "tagname": "dom-bind",
      "classname": "Polymer.DomBind",
      "superclass": "HTMLElement"
    },
    {
      "description": "Base class that provides the core API for Polymer's meta-programming\nfeatures including template stamping, data-binding, attribute deserialization,\nand property change observation.",
      "summary": "Custom element base class that provides the core API for Polymer's\n  key meta-programming features including template stamping, data-binding,\n  attribute deserialization, and property change observation",
      "path": "polymer-element.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 2
        },
        "end": {
          "line": 15,
          "column": 52
        }
      },
      "classname": "Polymer.Element",
      "superclass": "HTMLElement"
    },
    {
      "description": "The `<dom-repeat>` element will automatically stamp and binds one instance\nof template content to each object in a user-provided array.\n`dom-repeat` accepts an `items` property, and one instance of the template\nis stamped for each item into the DOM at the location of the `dom-repeat`\nelement.  The `item` property will be set on each instance's binding\nscope, thus templates should bind to sub-properties of `item`.\n\nExample:\n\n```html\n<dom-module id=\"employee-list\">\n\n  <template>\n\n    <div> Employee list: </div>\n    <template is=\"dom-repeat\" items=\"{{employees}}\">\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n    </template>\n\n  </template>\n\n  <script>\n    Polymer({\n      is: 'employee-list',\n      ready: function() {\n        this.employees = [\n            {first: 'Bob', last: 'Smith'},\n            {first: 'Sally', last: 'Johnson'},\n            ...\n        ];\n      }\n    });\n  &lt;/script&gt;\n\n</dom-module>\n```\n\nNotifications for changes to items sub-properties will be forwarded to template\ninstances, which will update via the normal structured data notification system.\n\nMutations to the `items` array itself should me made using the Array\nmutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n`unshift`), and template instances will be kept in sync with the data in the\narray.\n\nEvents caught by event handlers within the `dom-repeat` template will be\ndecorated with a `model` property, which represents the binding scope for\neach template instance.  The model is an instance of Polymer.Base, and should\nbe used to manipulate data on the instance, for example\n`event.model.set('item.checked', true);`.\n\nAlternatively, the model for a template instance for an element stamped by\na `dom-repeat` can be obtained using the `modelForElement` API on the\n`dom-repeat` that stamped it, for example\n`this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\nThis may be useful for manipulating instance data of event targets obtained\nby event handlers on parents of the `dom-repeat` (event delegation).\n\nA view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n`filter` and/or `sort` property.  This may be a string that names a function on\nthe host, or a function may be assigned to the property directly.  The functions\nshould implemented following the standard `Array` filter/sort API.\n\nIn order to re-run the filter or sort functions based on changes to sub-fields\nof `items`, the `observe` property may be set as a space-separated list of\n`item` sub-fields that should cause a re-filter/sort when modified.  If\nthe filter or sort function depends on properties not contained in `items`,\nthe user should observe changes to those properties and call `render` to update\nthe view based on the dependency change.\n\nFor example, for an `dom-repeat` with a filter of the following:\n\n```js\nisEngineer: function(item) {\n    return item.type == 'engineer' || item.manager.type == 'engineer';\n}\n```\n\nThen the `observe` property should be configured as follows:\n\n```html\n<template is=\"dom-repeat\" items=\"{{employees}}\"\n          filter=\"isEngineer\" observe=\"type manager.type\">\n```",
      "summary": "Custom element for stamping instance of a template bound to\n  items in an array.",
      "path": "lib/elements/dom-repeat.html",
      "attributes": [
        {
          "name": "items",
          "description": "An array containing items determining how many instances of the template\nto stamp and that that each template instance should bind to.",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 8
            },
            "end": {
              "line": 137,
              "column": 9
            }
          },
          "type": "Array",
          "metadata": {}
        },
        {
          "name": "as",
          "description": "The name of the variable to add to the binding scope for the array\nelement associated with a given template instance.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 146,
              "column": 9
            }
          },
          "type": "string",
          "metadata": {}
        },
        {
          "name": "index-as",
          "description": "The name of the variable to add to the binding scope with the index\nfor the inst.  If `sort` is provided, the index will reflect the\nsorted order (rather than the original array order).",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 9
            }
          },
          "type": "string",
          "metadata": {}
        },
        {
          "name": "items-index-as",
          "description": "The name of the variable to add to the binding scope with the index\nfor the inst.  If `sort` is provided, the index will reflect the\nsorted order (rather than the original array order).",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 8
            },
            "end": {
              "line": 166,
              "column": 9
            }
          },
          "type": "string",
          "metadata": {}
        },
        {
          "name": "sort",
          "description": "A function that should determine the sort order of the items.  This\nproperty should either be provided as a string, indicating a method\nname on the element's host, or else be an actual function.  The\nfunction should match the sort function passed to `Array.sort`.\nUsing a sort function has no effect on the underlying `items` array.",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 178,
              "column": 9
            }
          },
          "type": "Function",
          "metadata": {}
        },
        {
          "name": "filter",
          "description": "A function that can be used to filter items out of the view.  This\nproperty should either be provided as a string, indicating a method\nname on the element's host, or else be an actual function.  The\nfunction should match the sort function passed to `Array.filter`.\nUsing a filter function has no effect on the underlying `items` array.",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 8
            },
            "end": {
              "line": 190,
              "column": 9
            }
          },
          "type": "Function",
          "metadata": {}
        },
        {
          "name": "observe",
          "description": "When using a `filter` or `sort` function, the `observe` property\nshould be set to a space-separated list of the names of item\nsub-fields that should trigger a re-sort or re-filter when changed.\nThese should generally be fields of `item` that the sort or filter\nfunction depends on.",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 8
            },
            "end": {
              "line": 202,
              "column": 9
            }
          },
          "type": "string",
          "metadata": {}
        },
        {
          "name": "delay",
          "description": "When using a `filter` or `sort` function, the `delay` property\ndetermines a debounce time after a change to observed item\nproperties that must pass before the filter or sort is re-run.\nThis is useful in rate-limiting shuffing of the view when\nitem changes may be frequent.",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 211,
              "column": 21
            }
          },
          "type": "number",
          "metadata": {}
        },
        {
          "name": "rendered-item-count",
          "description": "Count of currently rendered items after `filter` (if any) has been applied.\nIf \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\nset of template instances is rendered.",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 8
            },
            "end": {
              "line": 223,
              "column": 9
            }
          },
          "type": "number",
          "metadata": {}
        },
        {
          "name": "initial-count",
          "description": "Defines an initial count of template instances to render after setting\nthe `items` array, before the next paint, and puts the `dom-repeat`\ninto \"chunking mode\".  The remaining items will be created and rendered\nincrementally at each animation frame therof until all instances have\nbeen rendered.",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 8
            },
            "end": {
              "line": 235,
              "column": 9
            }
          },
          "type": "number",
          "metadata": {}
        },
        {
          "name": "target-framerate",
          "description": "When `initialCount` is used, this property defines a frame rate to\ntarget by throttling the number of instances rendered each frame to\nnot exceed the budget for the target frame rate.  Setting this to a\nhigher number will allow lower latency and higher throughput for\nthings like event handlers, but will result in a longer time for the\nremaining items to complete rendering.",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 8
            },
            "end": {
              "line": 248,
              "column": 9
            }
          },
          "type": "number",
          "metadata": {}
        }
      ],
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "description": "An array containing items determining how many instances of the template\nto stamp and that that each template instance should bind to.",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 8
            },
            "end": {
              "line": 137,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "as",
          "type": "string",
          "description": "The name of the variable to add to the binding scope for the array\nelement associated with a given template instance.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 146,
              "column": 9
            }
          },
          "defaultValue": "\"item\"",
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "indexAs",
          "type": "string",
          "description": "The name of the variable to add to the binding scope with the index\nfor the inst.  If `sort` is provided, the index will reflect the\nsorted order (rather than the original array order).",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 9
            }
          },
          "defaultValue": "\"index\"",
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "itemsIndexAs",
          "type": "string",
          "description": "The name of the variable to add to the binding scope with the index\nfor the inst.  If `sort` is provided, the index will reflect the\nsorted order (rather than the original array order).",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 8
            },
            "end": {
              "line": 166,
              "column": 9
            }
          },
          "defaultValue": "\"itemsIndex\"",
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "observe",
          "type": "string",
          "description": "When using a `filter` or `sort` function, the `observe` property\nshould be set to a space-separated list of the names of item\nsub-fields that should trigger a re-sort or re-filter when changed.\nThese should generally be fields of `item` that the sort or filter\nfunction depends on.",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 8
            },
            "end": {
              "line": 202,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"__observeChanged\""
            }
          }
        },
        {
          "name": "delay",
          "type": "number",
          "description": "When using a `filter` or `sort` function, the `delay` property\ndetermines a debounce time after a change to observed item\nproperties that must pass before the filter or sort is re-run.\nThis is useful in rate-limiting shuffing of the view when\nitem changes may be frequent.",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 211,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "renderedItemCount",
          "type": "number",
          "description": "Count of currently rendered items after `filter` (if any) has been applied.\nIf \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\nset of template instances is rendered.",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 8
            },
            "end": {
              "line": 223,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "initialCount",
          "type": "number",
          "description": "Defines an initial count of template instances to render after setting\nthe `items` array, before the next paint, and puts the `dom-repeat`\ninto \"chunking mode\".  The remaining items will be created and rendered\nincrementally at each animation frame therof until all instances have\nbeen rendered.",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 8
            },
            "end": {
              "line": 235,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"__initializeChunking\""
            }
          }
        },
        {
          "name": "targetFramerate",
          "type": "number",
          "description": "When `initialCount` is used, this property defines a frame rate to\ntarget by throttling the number of instances rendered each frame to\nnot exceed the budget for the target frame rate.  Setting this to a\nhigher number will allow lower latency and higher throughput for\nthings like event handlers, but will result in a longer time for the\nremaining items to complete rendering.",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 8
            },
            "end": {
              "line": 248,
              "column": 9
            }
          },
          "defaultValue": "20",
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [
        {
          "name": "dom-change",
          "description": "dom-change",
          "type": "CustomEvent",
          "metadata": {}
        },
        {
          "name": "rendered-item-count-changed",
          "description": "Fired when the `renderedItemCount` property changes.",
          "type": "CustomEvent",
          "metadata": {}
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 112,
          "column": 2
        },
        "end": {
          "line": 668,
          "column": 3
        }
      },
      "tagname": "dom-repeat",
      "classname": "Polymer.DomRepeat",
      "superclass": "HTMLElement"
    },
    {
      "description": "The `<dom-if>` element will stamp a light-dom `<template>` child when\nthe `if` property becomes truthy, and the template can use Polymer\ndata-binding and declarative event features when used in the context of\na Polymer element's template.\n\nWhen `if` becomes falsey, the stamped content is hidden but not\nremoved from dom. When `if` subsequently becomes truthy again, the content\nis simply re-shown. This approach is used due to its favorable performance\ncharacteristics: the expense of creating template content is paid only\nonce and lazily.\n\nSet the `restamp` property to true to force the stamped content to be\ncreated / destroyed when the `if` condition changes.",
      "summary": "Custom element that conditionally stamps and hides or removes\n  template content based on a boolean flag.",
      "path": "lib/elements/dom-if.html",
      "attributes": [
        {
          "name": "if",
          "description": "A boolean indicating whether this template should stamp.",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "type": "boolean",
          "metadata": {}
        },
        {
          "name": "restamp",
          "description": "When true, elements will be removed from DOM and discarded when `if`\nbecomes false and re-created and added back to the DOM when `if`\nbecomes true.  By default, stamped elements will be hidden but left\nin the DOM when `if` becomes false, which is generally results\nin better performance.",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "type": "boolean",
          "metadata": {}
        }
      ],
      "properties": [
        {
          "name": "if",
          "type": "boolean",
          "description": "A boolean indicating whether this template should stamp.",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"__debounceRender\""
            }
          }
        },
        {
          "name": "restamp",
          "type": "boolean",
          "description": "When true, elements will be removed from DOM and discarded when `if`\nbecomes false and re-created and added back to the DOM when `if`\nbecomes true.  By default, stamped elements will be hidden but left\nin the DOM when `if` becomes false, which is generally results\nin better performance.",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"__debounceRender\""
            }
          }
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [
        {
          "name": "dom-change",
          "description": "dom-change",
          "type": "CustomEvent",
          "metadata": {}
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 2
        },
        "end": {
          "line": 250,
          "column": 3
        }
      },
      "tagname": "dom-if",
      "classname": "Polymer.DomIf",
      "superclass": "HTMLElement"
    },
    {
      "description": "Element implementing the `Polymer.ArraySelector` mixin, which records\ndynamic associations between item paths in a master `items` array and a\n`selected` array such that path changes to the master array (at the host)\nelement or elsewhere via data-binding) are correctly propagated to items\nin the selected array and vice-versa.\n\nThe `items` property accepts an array of user data, and via the\n`select(item)` and `deselect(item)` API, updates the `selected` property\nwhich may be bound to other parts of the application, and any changes to\nsub-fields of `selected` item(s) will be kept in sync with items in the\n`items` array.  When `multi` is false, `selected` is a property\nrepresenting the last selected item.  When `multi` is true, `selected`\nis an array of multiply selected items.\n\nExample:\n\n```html\n<dom-module id=\"employee-list\">\n\n  <template>\n\n    <div> Employee list: </div>\n    <template is=\"dom-repeat\" id=\"employeeList\" items=\"{{employees}}\">\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n        <button on-click=\"toggleSelection\">Select</button>\n    </template>\n\n    <array-selector id=\"selector\" items=\"{{employees}}\" selected=\"{{selected}}\" multi toggle></array-selector>\n\n    <div> Selected employees: </div>\n    <template is=\"dom-repeat\" items=\"{{selected}}\">\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n    </template>\n\n  </template>\n\n</dom-module>\n```\n\n```js\nPolymer({\n  is: 'employee-list',\n  ready() {\n    this.employees = [\n        {first: 'Bob', last: 'Smith'},\n        {first: 'Sally', last: 'Johnson'},\n        ...\n    ];\n  },\n  toggleSelection(e) {\n    var item = this.$.employeeList.itemForElement(e.target);\n    this.$.selector.select(item);\n  }\n});\n```",
      "summary": "Custom element that links paths between an input `items` array and\n  an output `selected` item or array based on calls to its selection API.",
      "path": "lib/elements/array-selector.html",
      "attributes": [
        {
          "name": "items",
          "description": "An array containing items from which selection will be made.",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 11
            }
          },
          "type": "Array",
          "metadata": {}
        },
        {
          "name": "multi",
          "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "type": "boolean",
          "metadata": {}
        },
        {
          "name": "selected",
          "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "type": "Object",
          "metadata": {}
        },
        {
          "name": "selected-item",
          "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 76,
              "column": 11
            }
          },
          "type": "Object",
          "metadata": {}
        },
        {
          "name": "toggle",
          "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "type": "boolean",
          "metadata": {}
        }
      ],
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "description": "An array containing items from which selection will be made.",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "multi",
          "type": "boolean",
          "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "defaultValue": "false",
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "selected",
          "type": "Object",
          "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "selectedItem",
          "type": "Object",
          "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 76,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "toggle",
          "type": "boolean",
          "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "defaultValue": "false",
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [
        {
          "name": "selected-changed",
          "description": "Fired when the `selected` property changes.",
          "type": "CustomEvent",
          "metadata": {}
        },
        {
          "name": "selected-item-changed",
          "description": "Fired when the `selectedItem` property changes.",
          "type": "CustomEvent",
          "metadata": {}
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 392,
          "column": 2
        },
        "end": {
          "line": 396,
          "column": 3
        }
      },
      "classname": "Polymer.ArraySelector",
      "superclass": "HTMLElement"
    },
    {
      "description": "Custom element for defining styles in the main document that can take\nadvantage of several special features of Polymer's styling system:\n\n- Document styles defined in a custom-style are shimmed to ensure they\n  do not leak into local DOM when running on browsers without native\n  Shadow DOM.\n- Custom properties used by Polymer's shim for cross-scope styling may\n  be defined in an custom-style. Use the :root selector to define custom\n  properties that apply to all custom elements.\n\nTo use, simply wrap an inline `<style>` tag in the main document whose\nCSS uses these features with a `<custom-style>` element.",
      "summary": "Custom element for defining styles in the main document that can\n  take advantage of Polymer's style scoping and custom properties shims.",
      "path": "lib/elements/custom-style.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 2
        },
        "end": {
          "line": 67,
          "column": 3
        }
      },
      "tagname": "custom-style",
      "classname": "Polymer.CustomStyle",
      "superclass": "HTMLElement"
    }
  ],
  "mixins": [
    {
      "description": "Element class mixin that provides basic meta-programming for creating one\nor more property accessors (getter/setter pair) that enqueue an async\n(batched) `_propertiesChanged` callback.\n\nFor basic usage of this mixin, simply declare attributes to observe via\nthe standard `static get observedAttributes()`, implement `_propertiesChanged`\non the class, and then call `MyClass.createPropertiesForAttributes()` once\non the class to generate property accessors for each observed attribute\nprior to instancing.  Any `observedAttributes` will automatically be\ndeserialized via `attributeChangedCallback` and set to the associated\nproperty using `dash-case`-to-`camelCase` convention.",
      "summary": "",
      "path": "lib/mixins/property-accessors.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 90,
          "column": 2
        },
        "end": {
          "line": 490,
          "column": 4
        }
      },
      "name": "Polymer.PropertyAccessors"
    },
    {
      "description": "Element mixin that provides basic template parsing and stamping, including\nthe following template-related features for stamped templates:\n\n- Declarative event listeners (`on-eventname=\"listener\"`)\n- Map of node id's to stamped node instances (`this.$.id`)\n- Nested template content caching/removal and re-installation (performance\n  optimization)\n- Relative URL's relative to original template location\n- Template binding annotation parsing (note that this library only parses\n  template bindings and provides annotation metadata; see\n  `Polymer.PropertyEffects` for a full implementation of data-binding)",
      "summary": "",
      "path": "lib/mixins/template-stamp.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 453,
          "column": 2
        },
        "end": {
          "line": 540,
          "column": 4
        }
      },
      "name": "Polymer.TemplateStamp"
    },
    {
      "description": "Element class mixin that provides meta-programming for Polymer's template\nbinding and data observation (collectively, \"property effects\") system.\n\nThis mixin uses provides the following key methods for adding property effects\nto this element:\n- `_createPropertyObserver`\n- `_createMethodObserver`\n- `_createNotifyingProperty`\n- `_createReadOnlyProperty`\n- `_createReflectedProperty`\n- `_createComputedProperty`\n- `_bindTemplate`\n\nEach method creates one or more property accessors, along with metadata\nused by this mixin's implementation of `_propertiesChanged` to perform\nthe property effects.  These methods may be called on element instances,\nbut are designed to be called on element prototypes such that the work to\nset up accessors and effect metadata are done once per element class.",
      "summary": "",
      "path": "lib/mixins/property-effects.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1234,
          "column": 2
        },
        "end": {
          "line": 2242,
          "column": 4
        }
      },
      "name": "Polymer.PropertyEffects"
    },
    {
      "description": "Element class mixin that provides the core API for Polymer's meta-programming\nfeatures including template stamping, data-binding, attribute deserialization,\nand property change observation.\n\nSubclassers may provide the following static getters to return metadata\nused to configure Polymer's features for the class:\n\n- `static get is()`: When the template is provided via a `dom-module`,\n  users should return the `dom-module` id from a static `is` getter.  If\n  no template is needed or the template is provided directly via the\n  `template` getter, there is no need to define `is` for the element.\n\n- `static get template()`: Users may provide the template directly (as\n  opposed to via `dom-module`) by implementing a static `template` getter.\n  The getter may return an `HTMLTemplateElement` or a string, which will\n  automatically be parsed into a template.\n\n- `static get properties()`: Should return an object describing\n  property-related metadata used by Polymer features (key: property name\n  value: object containing property metadata). Valid keys in per-property\n  metadata include:\n  - `type` (String|Number|Object|Array|...): Used by\n    `attributeChangedCallback` to determine how string-based attributes\n    are deserialized to JavaScript property values.\n  - `notify` (boolean): Causes a change in the property to fire a\n    non-bubbling event called `<property>-changed`. Elements that have\n    enabled two-way binding to the property use this event to observe changes.\n  - `readOnly` (boolean): Creates a getter for the property, but no setter.\n    To set a read-only property, use the private setter method\n    `_setProperty(property, value)`.\n  - `observer` (string): Observer method name that will be called when\n    the property changes. The arguments of the method are\n    `(value, previousValue)`.\n  - `computed` (string): String describing method and dependent properties\n    for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n    Computed properties are read-only by default and can only be changed\n    via the return value of the computing method.\n\n- `static get observers()`: Array of strings describing multi-property\n  observer methods and their dependent properties (e.g.\n  `'observeABC(a, b, c)'`).\n\nThe base class provides default implementations for the following standard\ncustom element lifecycle callbacks; users may override these, but should\ncall the super method to ensure\n- `constructor`: Run when the element is created or upgraded\n- `connectedCallback`: Run each time the element is connected to the\n  document\n- `disconnectedCallback`: Run each time the element is disconnected from\n  the document\n- `attributeChangedCallback`: Run each time an attribute in\n  `observedAttributes` is set or removed (note: this element's default\n  `observedAttributes` implementation will automatically return an array\n  of dash-cased attributes based on `properties`)",
      "summary": "",
      "path": "lib/mixins/element-mixin.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 108,
          "column": 2
        },
        "end": {
          "line": 651,
          "column": 4
        }
      },
      "name": "Polymer.ElementMixin"
    },
    {
      "description": "Element class mixin that provides API for adding Polymer's cross-platform\ngesture events to nodes.\n\nThe API is designed to be compatible with override points implemented\nin `Polymer.TemplateStamp` such that declarative event listeners in\ntemplates will support gesture events when this mixin is applied along with\n`Polymer.TemplateStamp`.",
      "summary": "",
      "path": "lib/mixins/gesture-event-listeners.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 2
        },
        "end": {
          "line": 53,
          "column": 4
        }
      },
      "name": "Polymer.GestureEventListeners"
    },
    {
      "description": "Element class mixin that provides Polymer's \"legacy\" API intended to be\nbackward-compatible to the greatest extent possible with the API\nfound on the Polymer 1.x `Polymer.Base` prototype applied to all elements\ndefined using the `Polymer({...})` function.",
      "summary": "",
      "path": "lib/legacy/legacy-element-mixin.html",
      "attributes": [],
      "properties": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 2
        },
        "end": {
          "line": 853,
          "column": 4
        }
      },
      "name": "Polymer.LegacyElementMixin"
    },
    {
      "description": "Element mixin for recording  dynamic associations between item paths in a\nmaster `items` array and a `selected` array such that path changes to the\nmaster array (at the host) element or elsewhere via data-binding) are\ncorrectly propagated to items in the selected array and vice-versa.\n\nThe `items` property accepts an array of user data, and via the\n`select(item)` and `deselect(item)` API, updates the `selected` property\nwhich may be bound to other parts of the application, and any changes to\nsub-fields of `selected` item(s) will be kept in sync with items in the\n`items` array.  When `multi` is false, `selected` is a property\nrepresenting the last selected item.  When `multi` is true, `selected`\nis an array of multiply selected items.",
      "summary": "",
      "path": "lib/elements/array-selector.html",
      "attributes": [
        {
          "name": "items",
          "description": "An array containing items from which selection will be made.",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 11
            }
          },
          "type": "Array",
          "metadata": {}
        },
        {
          "name": "multi",
          "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "type": "boolean",
          "metadata": {}
        },
        {
          "name": "selected",
          "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "type": "Object",
          "metadata": {}
        },
        {
          "name": "selected-item",
          "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 76,
              "column": 11
            }
          },
          "type": "Object",
          "metadata": {}
        },
        {
          "name": "toggle",
          "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "type": "boolean",
          "metadata": {}
        }
      ],
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "description": "An array containing items from which selection will be made.",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "multi",
          "type": "boolean",
          "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "defaultValue": "false",
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "selected",
          "type": "Object",
          "description": "When `multi` is true, this is an array that contains any selected.\nWhen `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "selectedItem",
          "type": "Object",
          "description": "When `multi` is false, this is the currently selected item, or `null`\nif no item is selected.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 76,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "toggle",
          "type": "boolean",
          "description": "When `true`, calling `select` on an item that is already selected\nwill deselect the item.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "defaultValue": "false",
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "demos": [],
      "slots": [],
      "events": [
        {
          "name": "selected-changed",
          "description": "Fired when the `selected` property changes.",
          "type": "CustomEvent",
          "metadata": {}
        },
        {
          "name": "selected-item-changed",
          "description": "Fired when the `selectedItem` property changes.",
          "type": "CustomEvent",
          "metadata": {}
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 2
        },
        "end": {
          "line": 321,
          "column": 5
        }
      },
      "name": "Polymer.ArraySelectorMixin"
    }
  ]
}
